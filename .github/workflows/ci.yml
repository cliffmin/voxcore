name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/** ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run with debug logging'
        required: false
        default: false

permissions:
  contents: write

env:
  JAVA_VERSION: '17'
  GRADLE_VERSION: '8.5'
  WHISPER_MODEL: 'base.en'

jobs:
  # Java tests - Core functionality
  java-tests:
    name: Java Tests
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Java
      uses: actions/setup-java@v5
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4
      with:
        gradle-version: ${{ env.GRADLE_VERSION }}
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Build Java post-processor (no tests; produce dist jar)
      run: |
        cd whisper-post-processor
        gradle clean buildAll --no-daemon --stacktrace
        
    - name: Run Java unit tests (unit only)
      run: |
        cd whisper-post-processor
        gradle test --no-daemon --info --stacktrace

    - name: Unit test summary
      if: always()
      run: |
        echo "=== Unit Test Summary ==="
        awk '/tests/ && /completed/' build/reports/tests/test/index.html || true
        
    - name: Generate test report
      if: always()
      run: |
        cd whisper-post-processor
        gradle jacocoTestReport --no-daemon || echo "JaCoCo report generation failed"
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: java-test-results
        path: |
          whisper-post-processor/build/reports/tests/
          whisper-post-processor/build/reports/jacoco/
        
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: whisper-post-processor
        path: whisper-post-processor/dist/whisper-post.jar

  # Integration tests - Whisper and audio processing (explicit)
  integration-tests:
    name: Integration Tests
    runs-on: macos-latest
    needs: java-tests
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Java
      uses: actions/setup-java@v5
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
    
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        brew update || true
        brew install ffmpeg
        brew install --cask hammerspoon || true
        
    - name: Install whisper-cpp (fast)
      run: |
        brew install whisper-cpp || true
        # Download base model if not cached
        mkdir -p ~/.cache/whisper
        if [ ! -f ~/.cache/whisper/ggml-base.en.bin ]; then
          curl -L "https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-base.en.bin" \
               -o ~/.cache/whisper/ggml-base.en.bin
        fi
        
    - name: Install OpenAI Whisper (fallback)
      run: |
        python -m pip install --upgrade pip
        pip install openai-whisper
        
    - name: Download test JAR
      uses: actions/download-artifact@v5
      with:
        name: whisper-post-processor
        path: whisper-post-processor/dist/
        
    - name: Run integration tests
      run: |
        cd whisper-post-processor
        # Run integration tests with more detailed output
        gradle integrationTest --no-daemon --info --stacktrace || {
          echo "Integration tests failed, continuing..."
          exit 0
        }

    - name: Integration test summary
      if: always()
      run: |
        echo "=== Integration Test Summary ==="
        awk '/tests/ && /completed/' whisper-post-processor/build/reports/tests/integrationTest/index.html || true

    - name: Daemon health check
      run: |
        bash scripts/testing/daemon_health.sh
        
    - name: Test Whisper pipeline
      run: |
        # Create test audio
        say -o /tmp/test.aiff "Hello, this is a test"
        ffmpeg -i /tmp/test.aiff -ar 16000 -ac 1 /tmp/test.wav -y
        
        # Test whisper-cpp if available
        if command -v whisper-cpp &> /dev/null; then
          echo "Testing whisper-cpp..."
          whisper-cpp --model base.en --output-txt /tmp/test.wav || true
        fi
        
        # Test OpenAI whisper
        echo "Testing OpenAI whisper..."
        whisper /tmp/test.wav --model base.en --output_format txt || true
        
    - name: Test Java post-processor
      run: |
        echo "=== Testing Java post-processor ==="
        
        # Test basic functionality
        echo "Um, this is, uh, a test." | java -jar whisper-post-processor/dist/whisper-post.jar
        
        # Test punctuation restoration
        echo "what is your name" | java -jar whisper-post-processor/dist/whisper-post.jar
        
        # Test with JSON input
        echo '{"text": "hello world"}' | java -jar whisper-post-processor/dist/whisper-post.jar --json
        
        echo "✓ Java post-processor tests passed"

  # Lua and shell script validation
  lua-shell-tests:
    name: Lua & Shell Tests
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Install Lua
      run: |
        brew install lua luarocks
        
    - name: Lua syntax check
      run: |
        echo "=== Checking Lua syntax ==="
        for file in hammerspoon/*.lua; do
          echo "Checking $file..."
          luac -p "$file"
        done
        
    - name: Install shellcheck
      run: brew install shellcheck
      
    - name: Shellcheck scripts
      run: |
        echo "=== Checking shell scripts ==="
        failed=0
        for script in $(find scripts -type f -name "*.sh"); do
          echo "Checking $script..."
          if ! shellcheck "$script"; then
            echo "✗ $script has issues"
            failed=1
          else
            echo "✓ $script is clean"
          fi
        done
        if [ $failed -eq 1 ]; then
          echo "Some shell scripts have issues (non-blocking)"
        fi
        
    - name: Check Makefile
      run: |
        echo "=== Validating Makefile targets ==="
        make help

  # Documentation and code quality
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Check documentation
      run: |
        echo "=== Required documentation ==="
        for doc in README.md CHANGELOG.md LICENSE WARP.md; do
          [ -f "$doc" ] && echo "✓ $doc exists" || exit 1
        done
        
    - name: Check line endings
      run: |
        echo "=== Checking for CRLF line endings ==="
        ! find . -type f \( -name "*.java" -o -name "*.lua" -o -name "*.md" \) \
          -exec file {} \; | grep CRLF
        
    - name: Check for large files
      run: |
        echo "=== Checking for large files (>1MB) ==="
        large_files=$(find . -type f -size +1M -not -path "./.git/*" \
                      -not -path "./whisper-post-processor/build/*" \
                      -not -name "*.jar" | head -10)
        if [ -n "$large_files" ]; then
          echo "Large files found:"
          echo "$large_files"
          exit 1
        fi
        
    - name: Check for sensitive data
      run: |
        echo "=== Checking for potential secrets ==="
        # Fail only when a likely secret value is present (assignment/colon + long value-like token)
        ! grep -rIn -E "((api[_-]?key|password|secret|token)[^A-Za-z0-9]{0,3}[:=][^A-Za-z0-9]{0,3}[\"']?[A-Za-z0-9/_\\-\\+=]{20,}[\"']?)" \
          --include="*.java" --include="*.lua" --include="*.sh" \
          --exclude-dir=.git --exclude-dir=build . | grep -v -E "(example|test|sample)"

  # Release build (only on main branch)
  release:
    name: Release Build
    runs-on: macos-latest
    needs: [java-tests, integration-tests, lua-shell-tests, quality-checks]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Java
      uses: actions/setup-java@v5
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Build release JAR
      run: |
        cd whisper-post-processor
        gradle clean buildAll --no-daemon --stacktrace
        
        # Verify JAR was created
        if [ ! -f dist/whisper-post.jar ]; then
          echo "Error: JAR file not created"
          exit 1
        fi
        
        # Test the release JAR
        echo "Testing release JAR..."
        echo "test" | java -jar dist/whisper-post.jar --version || true
        
    - name: Create release bundle
      run: |
        mkdir -p release
        cp whisper-post-processor/dist/whisper-post.jar release/
        cp -r hammerspoon release/
        cp -r scripts release/
        cp README.md CHANGELOG.md LICENSE release/
        tar -czf voxcore-release.tar.gz release/
        
    - name: Upload release artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-bundle
        path: voxcore-release.tar.gz
        retention-days: 30
    
    - name: Create GitHub Release (on tag)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v2
      with:
        draft: false
        prerelease: false
        files: |
          voxcore-release.tar.gz
          whisper-post-processor/dist/whisper-post.jar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Status check - Required for branch protection
  status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [java-tests, integration-tests, lua-shell-tests, quality-checks]
    if: always()
    
    steps:
    - name: Check status
      run: |
        if [[ "${{ needs.java-tests.result }}" == "failure" || \
              "${{ needs.integration-tests.result }}" == "failure" || \
              "${{ needs.lua-shell-tests.result }}" == "failure" || \
              "${{ needs.quality-checks.result }}" == "failure" ]]; then
          echo "CI failed"
          exit 1
        fi
        echo "CI passed"
